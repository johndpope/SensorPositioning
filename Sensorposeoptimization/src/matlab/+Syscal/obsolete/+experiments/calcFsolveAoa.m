function [scal, result] = calcFsolveAoa(scene, posVar, sensVar, alg, jacobian, bounds)

scal = syscal.createRunParameters(scene, 'rnd', posVar, sensVar);
scal.userData.plotState = true;

fun = @(x) syscal.calcStateAoaTan(x, scal);

opt = optimset('display', 'iter'...
    , 'maxfunevals', 500*numel(scal.stateCurrent) ...
    , 'maxiter', 500*numel(scal.stateCurrent) ...
    , 'plotfcns', @optimplotfval...
    , 'tolfun', 1e-6...
    , 'tolx', 1e-6...
    , 'Jacobian', jacobian...
    , 'Algorithm', alg...
    ..., 'Algorithm', 'trust-region-dogleg'...%DEFAULT
    ...    , 'Algorithm', 'trust-region-reflective'...
    ...    , 'Algorithm', {'levenberg-marquardt', 0.01'}...
    ...    , 'DiffMaxChange', 1 ...
    ...    , 'DiffMinChange', 1e-3 ...
    );

P.objective = fun;
P.x0 = scal.stateCurrent;
P.options = opt;
P.solver = 'fsolve';
if nargin > 5 && bounds
    P.lb = scal.stateLimits(:,1);
    P.ub = sum(scal.stateLimits, 2);
    P.solver = 'lsqnonlin';
    [result.state, result.fval, result.exitflag, result.output ] = lsqnonlin(P);
    return;
else
    [result.state, result.fval, result.exitflag, result.output ] = fsolve(P);
end



